lass Solution {
    // Function to find the smallest window in the string s consisting
    // of all the characters of string p.
    public static String smallestWindow(String s, String p) {
        if (s.length() < p.length()) return "-1";
        
        HashMap<Character, Integer> map = new HashMap<>();
        for (char c : p.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }

        int count = map.size();
        int minLength = Integer.MAX_VALUE;
        int l = 0, r = 0;
        int startIndex = -1;

        while (r < s.length()) {
            char endChar = s.charAt(r);
            if (map.containsKey(endChar)) {
                map.put(endChar, map.get(endChar) - 1);
                if (map.get(endChar) == 0) {
                count--;
                    
                }
            } // if ends

            while (count == 0) {
                if (r - l + 1 < minLength) {
                    minLength = r - l + 1;
                    startIndex = l;
                }
                char startChar = s.charAt(l);
                if (map.containsKey(startChar)) {
                    map.put(startChar, map.get(startChar) + 1);
                    if (map.get(startChar) > 0) {
                    count++;
                    }
                }
                l++;
            } // while count one ends 
            r++;
        } // main while ends 
if (startIndex == -1) {
    return "-1";
} else {
    return s.substring(startIndex, startIndex + minLength);
}

    }
}
