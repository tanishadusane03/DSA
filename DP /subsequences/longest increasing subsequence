class Solution {
    public int lengthOfLIS(int[] nums) {
        int n=nums.length;
        int[][] dp=new int[n][n+1];
        for(int i=0;i<n;i++){
            for(int j=0;j<n+1;j++){
                dp[i][j]=-1;
            }
        }
        return flis(nums,dp,0,-1);
        
    }
    static int flis(int[] nums,int[][] dp,int ind,int prevind){
        int n=nums.length;
        if(ind==n){
            return 0;
        }
    if(dp[ind][prevind+1]!=-1){
        return dp[ind][prevind+1];
    }
        int nplen=0+flis(nums,dp,ind+1,prevind);
        int plen=0;
        if(prevind==-1 || nums[ind]>nums[prevind]){
            plen=1+flis(nums,dp,ind+1,ind);
        }
        dp[ind][prevind+1]=Math.max(nplen,plen);
        return dp[ind][prevind+1];
    }
}
