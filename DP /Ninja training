//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.lang.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int N = sc.nextInt();
            int[][] arr = new int[N][3];
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < 3; j++) {
                    arr[i][j] = sc.nextInt();
                }
            }
            Solution obj = new Solution();
            int res = obj.maximumPoints(arr, N);
            System.out.println(res);
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {
    public int maximumPoints(int arr[][], int N) {
        
       return  findmax(arr,N);
    }
    static int findmax(int points[][], int N){
        int[][] dp=new int[N][4];
        //dp[day][last]
        dp[0][0]=Math.max(points[0][1],points[0][2]);
        dp[0][1]=Math.max(points[0][0],points[0][2]);
        dp[0][2]=Math.max(points[0][0],points[0][1]);
        dp[0][3]=Math.max(points[0][1],Math.max(points[0][3],points[0][2]));
        
        for(int day=1;day<N;day++){ //1 to n1
            
            for(int last=0;last<4;last++){ // 0 to 3
            
                for(int task=0;task<3;task++){ //0 to 2
                    if(task!=last){
                        int point=points[day][task]+dp[day-1][task];
                        dp[day][last]=Math.max(point,dp[day][last]);
                        
                    }
                }
            }
        }
        return dp[N-1][3];
        
    }
}
