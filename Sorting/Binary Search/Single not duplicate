MY approach

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int n=nums.length;
        if(n==1){
            return nums[0];
        }
        int votes=1;
        int ele=nums[0];

        for(int i=1;i<n;i++){
            if(nums[i]==ele){
                votes++;
            }
            else{
                if(votes==1){
                    return nums[i-1];
                }
                else{
                    ele=nums[i];
                    votes=1;
                }
            }
        }
        if(votes==1){
            return nums[n-1];
        }


BETTER approach 
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int n=nums.length;
        if(n==1){
            return nums[0];
        }
      if(nums[n-1]!=nums[n-2]){
            return nums[n-1];
      }
      if(nums[0]!=nums[1]){
        return nums[0];
      }
    int low=1;
    int high=n-2;
int i=0;
    while(low<=high){
        int mid=(low+high)/2;
        if(nums[mid-1]!= nums[mid] && nums[mid]!=nums[mid+1]){
            return nums[mid];
        }
        if(mid%2==1 && nums[mid-1]==nums[mid] || mid%2==0 && nums[mid]==nums[mid+1]){
          low=mid+1;
        }
        else{
            // the lement is between O,E and E,O
            high=mid-1;
        }
    }
    return-1;


    }
}
        
        return -1;
    }
}
