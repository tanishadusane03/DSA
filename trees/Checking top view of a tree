class Pair {
    Node node;
    int line;
    
    Pair(Node node, int line) {
        this.node = node; // Correctly assign the node
        this.line = line;
    }
}

class Solution {
    // Function to return a list of nodes visible from the top view
    // from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root) {
        Queue<Pair> q = new LinkedList<Pair>();
        Map<Integer, Integer> map = new TreeMap<>();
        ArrayList<Integer> ans = new ArrayList<>();
        
        if (root == null) return ans; // Add a null check for root
        
        q.offer(new Pair(root, 0));
        while (!q.isEmpty()) {
            Pair curr = q.poll();
            int line = curr.line;
            Node temp = curr.node;
            
            // Correct method to check if the key exists in the map
            if (!map.containsKey(line)) {
                map.put(line, temp.data);
            }
            
            if (temp.left != null) {
                q.offer(new Pair(temp.left, line - 1));
            }
            if (temp.right != null) {
                q.offer(new Pair(temp.right, line + 1));
            }
        }
        
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            ans.add(entry.getValue()); // Correct method to get the value from the entry
        }
        
        return ans;
    }
}
