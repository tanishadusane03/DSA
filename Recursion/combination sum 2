class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        int n=candidates.length;
        Arrays.sort(candidates);
        List<Integer> ds=new ArrayList<>();
        List<List<Integer>> ans=new ArrayList<>();
        nodup(candidates,target,0,ds,ans,n);
        return ans;

        
    }
    public static void nodup(int[] arr, int target,int start,List<Integer> ds,List<List<Integer>> ans,int n){

            if(target==0){
               ans.add(new ArrayList<>(ds));
               return;
            }
            //skipping duplicates 
            for(int i=start;i<n;i++){
                 if(i>start && arr[i]==arr[i-1]){
                    continue;
                 }
                 if(arr[i]>target){
                    break;
                 }
                    ds.add(arr[i]);
                    nodup(arr,target-arr[i],i+1,ds,ans,n);
                    ds.remove(ds.size()-1);

            }
        }
    }
