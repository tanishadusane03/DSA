class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        int n=matrix.length;
        int m=matrix[0].length;
        ArrayList<Integer> list=new ArrayList<>();
        int colbeg=0;
        int colend=m-1;
        int rowbeg=0;
        int rowend=n-1;

        while(rowbeg <= rowend && colbeg <= colend){
      //travel right
      for(int j=colbeg;j<=colend;j++){
        list.add(matrix[rowbeg][j]);
      }
      rowbeg++;
      //travel down
      for(int i=rowbeg;i<=rowend;i++){
        list.add(matrix[i][colend]);
      }
      colend--;

      // travel left in row 
      if(rowbeg<=rowend){
for(int j=colend;j>=colbeg;j--){
        list.add(matrix[rowend][j]);
      }
      rowend--;
      }
        

      //travel up 
      if(colbeg<=colend){
    for(int i=rowend;i>=rowbeg;i--){
        list.add(matrix[i][colbeg]);
      }
      colbeg++;
      }
      
        }
        
        return list;
            
    }
}

The provided code performs a spiral traversal of a 2D matrix.

Time Complexity:
- The algorithm visits each element exactly once.
- For an m x n matrix, there are m*n elements.
- Therefore, the total number of operations is proportional to m*n.
- The time complexity is O(m*n).

Space Complexity:
- The additional space used is primarily for the output list that stores all elements.
- The list will contain m*n elements.
- Apart from the output list, only a few variables are used for indices and boundaries.
- Therefore, the auxiliary space complexity is O(m*n) for the output list.
- If considering only auxiliary space (excluding output), it is O(1).

In summary:
- Time complexity: O(m*n)
- Space complexity: O(m*n) (due to the output list)
