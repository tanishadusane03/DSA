class Solution {
    public int longestConsecutive(int[] nums) {
        Arrays.sort(nums);
       int n=nums.length;
       if(n==0){
        return 0;
       }
       int i=1;
       int count=1;
       int maxcount=1;
       for(i=1;i<n;i++){
        int diff=nums[i]-nums[i-1];
        if(nums[i]==nums[i-1]){
            continue;
        }
           if(diff==1){
            count=count+1;
            maxcount=Math.max(count,maxcount);
           }else{
            count=1;
           }
       }
       return maxcount;
    }
}
ANOTHER APPROACH 

class Solution {
    public int longestConsecutive(int[] arr) {
        HashSet<Integer> set=new HashSet<>();
        int n=arr.length;
        for(int i=0;i<n;i++){
            set.add(arr[i]);
        }
        
        if(n==0){
            return 0;
        }
        if(n==0 && arr[0]==0){
            return 1;
        }
        int maxl=0;
        for(int i=0;i<n;i++){
            int a=arr[i];
            if(!set.contains(a-1)){
                int count=1;
                    while(set.contains(a+1)){
                        count=count+1;
                        a++;
                       
                    }
                     maxl=Math.max(count,maxl);
                }
            
        }
        return maxl;
    }
}
