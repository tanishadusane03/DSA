using a single queue 

class MyStack {

       Queue<Integer> q1;
      
      

    public MyStack() {
    q1=new LinkedList<>();

        
    }
    
    public void push(int x) {
        q1.add(x);

        for(int i=1;i<q1.size();i++){
            q1.add(q1.remove());
        }
    }
    
    public int pop() {
        return q1.remove();
    }
    
    public int top() {
       return q1.peek();
    }
    
    public boolean empty() {
        return q1.isEmpty();
    }
}


USING 2 Queues 

class MyStack {
    Queue<Integer> q1;
     Queue<Integer> q2;

    // Constructor to initialize the queues
    public MyStack() {
        q1 = new LinkedList<>();
        q2 = new LinkedList<>();
    }

   
    public void push(int x) {
        while(!q1.isEmpty()){
            q2.offer(q1.poll());
        }

        q1.add(x);

        while(!q2.isEmpty()){
            q1.offer(q2.poll());
        }
    }

   
    public int pop() {
      return q1.poll();
    }

    // Method to get the top element of the stack
    public int top() {
       return q1.peek();
    }

    // Method to check if the stack is empty
    public boolean empty() {
       return q1.isEmpty();
    }
    
}
